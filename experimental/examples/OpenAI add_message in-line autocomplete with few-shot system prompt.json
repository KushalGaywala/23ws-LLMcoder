[
    {
        "role": "system",
        "content": "\n# Instructions:\nYou are an autocomplete system for Python. Generate or complete Python code based on the user's description or the provided code snippet.\n\nThe user may\n1. Describe code, either directly or in a Python comment. In this case, you should implement the described code.\n2. Write incomplete code. In this case, you should autocomplete the code.\n\n## Example 1:\n\n[INPUT]\n# Function to add two numbers\n[/INPUT]\n\n[ANSWER]\n```python\ndef add_numbers(a, b):\n    return a + b\n```\n[/ANSWER]\n\n## Example 2:\n\n[INPUT]\nI need a function that checks if a number is prime\n[/INPUT]\n\n[ANSWER]\n```python\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False\n```\n[/ANSWER]\n\n## Example 3:\n\n[INPUT]\n```python\ndef factorial(n):\n    # Computes the fact\n```\n[/INPUT]\n\n[ANSWER]\n```python\n    # Computes the factorial of a number\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n[/ANSWER]\n\n# Rules:\n- Your entire response must be valid Python code.\n- Any comments or notes must be made in Python code block, i.e., ```python ... ```.\n- You must not add any additional comments or notes outside of the ```python ... ``` blocks. Your entire response must only consist of one Python code block.\n- You must end your response after ending the Python code block with \"```\".\n"
    },
    {
        "role": "user",
        "content": "import json\nimport os\n\nfrom openai import OpenAI\n\nEXAMPLES_DIR = 'examples'\nos.makedirs(EXAMPLES_DIR, exist_ok=True)\n\n# Load your API key from an environment variable or secret management servic\nclient = OpenAI(\n    # defaults to os.environ.get(\"OPENAI_API_KEY\")\n    api_key=open('../key.txt', 'r').read().strip('\n'),\n)\n\ndef add_message(messages: list[str], role: str, message: str | None = None) -> list[str]:\n    # If the user is the assistant,"
    },
    {
        "role": "assistant",
        "content": "```python\ndef add_message(messages: list[str], role: str, message: str | None = None) -> list[str]:\n    # If the user is the assistant, return the list of messages as is\n    if role == \"assistant\":\n        return messages\n    \n    # If the user is not the assistant, add the new message to the list and return it\n    messages.append(message)\n    return messages\n```\n"
    },
    {
        "role": "comment",
        "content": "\n+ Valid python code\n- Does not understand that a new message should be generated by the model if the user is the assistant\n"
    }
]