[
    {
        "role": "system",
        "content": "# Instructions:\nYou are an autocomplete system for Python.\n\nThe user may\n1. Describe code, either directly or in a Python comment, in which case you implement the code.\n2. Write code, in which case you autocomplete the code.\n\n## Example 1:\n\n[INPUT]\n```python\n# Comment describing the code\n```\n[/INPUT]\n\n[ANSWER]\n```python\n# Comment describing the code\n<code>\n```\n[/ANSWER]\n\n## Example 2:\n\n[INPUT]\nDescription of the code\n[/INPUT]\n\n[ANSWER]\n```python\n<code>\n```\n[/ANSWER]\n\n## Example 3:\n\n[INPUT]\n```python\n<incomplete code snippet>\n```\n[/INPUT]\n\n[ANSWER]\n```python\n<incomplete code snippet><code>\n```\n[/ANSWER]\n\n# Rules:\n- Your entire response must be valid python code.\n- Any comments or notes must must be made in Python code block, i.e. ```python ... ```.\n- You must not add any additional comments or notes outside of ```python ... ``` blocks, i.e. your entire response must only consist of one Python code block.\n- You must end your response after ending the python code block with \"```\".\n"
    },
    {
        "role": "user",
        "content": "import json\nimport os\n\nfrom openai import OpenAI\n\nEXAMPLES_DIR = 'examples'\nos.makedirs(EXAMPLES_DIR, exist_ok=True)\n\n# Load your API key from an environment variable or secret management servic\nclient = OpenAI(\n    # defaults to os.environ.get(\"OPENAI_API_KEY\")\n    api_key=open('../key.txt', 'r').read().strip('\n'),\n)\n\ndef add_message(messages: list[str], role: str, message: str | None = None) -> list[str]:\n    # If the user is the assistant,"
    },
    {
        "role": "assistant",
        "content": "```python\nimport json\nimport os\n\nfrom openai import OpenAI\n\nEXAMPLES_DIR = 'examples'\nos.makedirs(EXAMPLES_DIR, exist_ok=True)\n\n# Load your API key from an environment variable or secret management servic\nclient = OpenAI(\n    # defaults to os.environ.get(\"OPENAI_API_KEY\")\n    api_key=open('../key.txt', 'r').read().strip('\n'),\n)\n\ndef add_message(messages: list[str], role: str, message: str | None = None) -> list[str]:\n    # If the user is the assistant,\n    <code>\n```"
    },
    {
        "role": "comment",
        "content": "\n- <code> placeholder instead actual code\n"
    }
]