[
    {
        "role": "system",
        "content": "\n# Instructions:\nYou are an autocomplete system for Python. Generate or complete Python code based on the user's description or the provided code snippet.\n\nThe user may\n1. Describe code, either directly or in a Python comment. In this case, you should implement the described code.\n2. Write incomplete code. In this case, you should complete the code from the last cursor position.\n\n\n## Example 1:\n\n[INPUT]\n# Function that adds two numbers\ndef\n[/INPUT]\n\n[ANSWER]\n```python\n add_numbers(a, b):\n    return a + b\n```\n[/ANSWER]\n\n\n## Example 2:\n\n[INPUT]\n```python\ndef factorial(n):\n    # Computes the fact\n```\n[/INPUT]\n\n[ANSWER]\n```python\n    # Computes the factorial of a number\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n[/ANSWER]\n\n\n## Example 3:\n\n[INPUT]\nI need a function that checks if a number is prime\n[/INPUT]\n\n[ANSWER]\n```python\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False\n```\n[/ANSWER]\n\n\n# Rules:\n- Your entire response must be valid Python code.\n- Any comments or notes must be made in Python code block, i.e., ```python ... ```.\n- You must not add any additional comments or notes outside of the ```python ... ``` blocks. Your entire response must only consist of one Python code block.\n- You must end your response after ending the Python code block with \"```\".\n"
    },
    {
        "role": "user",
        "content": "import inspect\nimport json\nimport logging\nimport os\nimport shutil\nfrom typing import Any, Dict, List, Tuple\n\nfrom ..models import manager as mgr\nfrom ..utils import download_model, get_models_dir\nfrom .manager import ModelManager\n\nlogger = logging.getLogger('pmtrendviz.models.factory')\nCPU_COUNT = os.cpu_count() or 1\n\n\nclass ModelFactory(object):\n    @staticmethod\n    def create(\n        model: str,\n        include_title: bool = True,\n        include_abstract: bool = True,\n        include_keywords_major: bool = False,\n        include_keywords_minor: bool = False,\n        **kwargs: Any\n    ) -> ModelManager:\n        \"\"\""
    },
    {
        "role": "assistant",
        "content": "\"\"\"Create a model manager object based on the specified model.\n\n        Args:\n            model (str): The name of the model.\n            include_title (bool): Whether or not to include the title in the model.\n            include_abstract (bool): Whether or not to include the abstract in the model.\n            include_keywords_major (bool): Whether or not to include the major keywords in the model.\n            include_keywords_minor (bool): Whether or not to include the minor keywords in the model.\n            **kwargs (Any): Additional keyword arguments.\n\n        Returns:\n            ModelManager: The created model manager object.\n        \"\"\"\n        model_dir = get_models_dir()\n        model_path = os.path.join(model_dir, model)\n\n        if not os.path.exists(model_path):\n            raise ValueError(f\"Model '{model}' does not exist\")\n\n        model_info_path = os.path.join(model_path, 'model-info.json')\n        if not os.path.exists(model_info_path):\n            raise ValueError(f\"Model '{model}' does not have a 'model-info.json' file\")\n\n        with open(model_info_path) as f:\n            model_info = json.load(f)\n\n        include_categories = []\n        if include_title:\n            include_categories.append('title')\n        if include_abstract:\n            include_categories.append('abstract')\n        if include_keywords_major:\n            include_categories.append('keywords_major')\n        if include_keywords_minor:\n            include_categories.append('keywords_minor')\n\n        model_manager = mgr.ModelManager(\n            model_path,\n            model_info['tokenizer'],\n            model_info['model'],\n            include_categories=include_categories,\n            num_workers=CPU_COUNT,\n            **kwargs\n        )\n\n        return model_manager"
    },
    {
        "role": "comment",
        "content": "\n+ Good docstrings\n+ OK attempt at writing the code\n- Completion too long\n- Not wrapped in ```\n\n\nGround Truth:\n```python\n\n        Create a model manager from the given arguments\n\n        Parameters\n        ----------\n        model : str\n            The name of the model to create. This must correspond to a method in the ModelFactory class.\n        include_title : bool\n            Whether to include the title in the input text\n        include_abstract : bool\n            Whether to include the abstract in the input text\n        include_keywords_major : bool\n            Whether to include the major keywords in the input text\n        include_keywords_minor : bool\n            Whether to include the minor keywords in the input text\n        **kwargs : Any\n            The keyword arguments to pass to the ModelFactory method\n\n        Returns\n        -------\n        ModelManager\n            The corresponding model manager\n        \"\"\"\n        # Check if the ModelFactory has a method with the given name\n        if not hasattr(ModelFactory, model):\n            logger.error(f'No model named {model} found in ModelFactory.')\n            raise ValueError(f'No model named {model} found in ModelFactory.')\n\n        # Get the method\n        method = getattr(ModelFactory, model)\n\n        # Collect the preprocessing kwargs\n        preprocessing_kwargs = {\n            'include_title': include_title,\n            'include_abstract': include_abstract,\n            'include_keywords_major': include_keywords_major,\n            'include_keywords_minor': include_keywords_minor\n        }\n\n        logger.debug(f'Creating model {model} with preprocessing kwargs {preprocessing_kwargs} and kwargs {kwargs}')\n\n        # Filter out the kwargs that are not needed for the model with the inspect module\n        model_kwargs = {k: v for k, v in kwargs.items() if k in inspect.signature(method).parameters}\n\n        # Call the method\n        return method(preprocessing_kwargs, **model_kwargs)\n\n```\n"
    }
]