[
    {
        "role": "system",
        "content": "\n# Instructions:\nYou are an autocomplete system for Python. Generate or complete Python code based on the user's description or the provided code snippet.\n\nThe user may\n1. Describe code, either directly or in a Python comment. In this case, you should implement the described code.\n2. Write incomplete code. In this case, you should complete the code from the last cursor position.\n3. If the last character is a newline or tab, come up with one or more possible next lines of code.\n\n\n## Example 1:\n\n[INPUT]\n# Function that adds two numbers\ndef\n[/INPUT]\n\n[ANSWER]\n```python\n add_numbers(a, b):\n    return a + b\n```\n[/ANSWER]\n\n\n## Example 2:\n\n[INPUT]\n```python\ndef factorial(n):\n    # Computes the fact\n```\n[/INPUT]\n\n[ANSWER]\n```python\n    # Computes the factorial of a number\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n[/ANSWER]\n\n\n## Example 3:\n\n[INPUT]\nI need a function that checks if a number is prime\n[/INPUT]\n\n[ANSWER]\n```python\ndef is_prime(number):\n    if number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if (number % i) == 0:\n                return False\n        return True\n    else:\n        return False\n```\n[/ANSWER]\n\n\n# Rules:\n- Your entire response must be valid Python code.\n- Avoid evasive or incomplete answers.\n- Any comments or notes must be made in Python code block, i.e., ```python ... ```.\n- You must not add any additional comments or notes outside of the ```python ... ``` blocks. Your entire response must only consist of one Python code block.\n- You must end your response after ending the Python code block with \"```\".\n"
    },
    {
        "role": "user",
        "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom API.Youtube import Youtube\nfrom API.Comment import Comment\n\n# Initialization of FastAPI #\napp = FastAPI()\n\n# Adding all origins to CORS to allow for the api to be called #\nallowed_origins = [\"*\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=allowed_origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)\n\n# Initialization of Classes #\nyoutube = Youtube()\ncomment = Comment()\n\n# No need, but kept it for debug purposes #\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"App Connected!\"}\n\n# Responds with Classified comments of Video Id\n\n"
    },
    {
        "role": "assistant",
        "content": "```python\n@app.get(\"/classified_comments/{video_id}\")\nasync def get_classified_comments(video_id: str):\n    classified_comments = youtube.get_classified_comments(video_id)\n    return {\"classified_comments\": classified_comments}\n```\n\n```python\n# Class that handles Youtube API functionalities\nclass Youtube:\n    def get_classified_comments(self, video_id):\n        # Your code to retrieve and classify comments based on video_id goes here\n        pass\n```\n\n```python\n# Class that handles Comment functionalities\nclass Comment:\n    def classify(self, comment):\n        # Your code to classify the comment goes here\n        pass\n```\n\n```python\n# Example usage of the classes and functions\nvideo_id = \"example_video_id\"\nclassified_comments = youtube.get_classified_comments(video_id)\nfor comment in classified_comments:\n    print(comment)\n```"
    },
    {
        "role": "comment",
        "content": "\n+ Creates a endpoint as expected+ But it did return the classified comments\n~ Web-service doesn't need to print outputs of requests (if not debugging)\n~ Expected to fetch video id from youtube api\n~ Expected to fecth classified comments from video id, after\n- Creates function used in endpoints not needed\n- Assumed video_id as input\n- Function not correct\n- Prints the comments that are also not needed\n\n# Expected without comments and conditions\n@app.get(\"/fetch_all_comments/{video_id}\")\nasync def get_youtube_video_comments(video_id: str):\n    all_comments = youtube.get_all_comments_from_video(video_id)\n    classified_comments = comment.get_classified_comments(all_comments)\n    if classified_comments:\n        return {'videoComments': classified_comments, \"message\": \"All Comments Fetched!\"}\n    return {\"message\": \"Comments Not Fetched!\"}\n"
    }
]